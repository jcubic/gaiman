// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`errors should throw error for multi line string 1`] = `[Error: invalid string literal]`;

exports[`expressions should call methods 1`] = `
"async function main() {
    try {
        await location.replace(\`/__idb__/_gaiman.js\`);
        let $_x = new GaimanArray(1, 2, 3, 4);
        async function $_square($_x) {
            return $_x * $_x;
        }
        gaiman.echo(await $_x.map($_square));
        await $_foo.bar.baz(\`hello\`);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`expressions should chain methods 1`] = `
"async function main() {
    try {
        gaiman.echo(await (await new GaimanArray(1, 0, 2, 3, 0, 4).map($_square)).filter($_identity));
        let $_arr = new GaimanArray(1, 2, 3, 4, 5);
        gaiman.echo(await (await (await $_arr.map($_square)).filter($_identity)).join(\`\`));
        gaiman.echo(await (await \`foo\`.split(\`\`)).join(\`:\`));
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`expressions should parse assign operators 1`] = `
"async function main() {
    try {
        $_i = 2;
        $_i += 2;
        $_i -= 2;
        $_i *= 2;
        $_i /= 2;
        $_i %= 2;
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`expressions should parse map function 1`] = `
"async function main() {
    try {
        let $_noop = async function lambda($_x) {
        };
        async function $_map($_fn, $_list) {
            let $_result = new GaimanArray();
            for (let $_item of $_list) {
                if (gaiman.should_break_loop(1)) {
                    break;
                }
                await $_result.push($_item);
            }
            gaiman.exit_loop(1);
            return $_result;
        }
        gaiman.echo(await $_map(async function lambda($_x) {
            return $_x * $_x;
        }, new GaimanArray(1, 2, 3, 4)));
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`expressions should parse property access 1`] = `
"async function main() {
    try {
        gaiman.echo($_dict[$_i]);
        gaiman.echo(await gaiman.get($_dict[\`hello\`]));
        gaiman.echo(await gaiman.get($_dict[\`hello_\` + 10]));
        $_dict[$_i] = 10;
        $_dict[$_i] = { [\`foo\`]: 10 };
        $_dict[$_i][\`hello\`][\`world\`][$_nice];
        $_dict.foo.bar.baz[\`hello\`][$_nice].quux;
        $_dict[$_i][\`hello\`].foo.bar.baz[\`hello\`][$_nice].quux;
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`expressions should parse property access 2`] = `
"async function main() {
    try {
        $_dict[$_i] = 10;
        $_dict[$_i] = { [\`foo\`]: 10 };
        $_dict[10 + 10] = \`hello \${ $_bar }\`;
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`expressions should use command as part of expression 1`] = `
"async function main() {
    try {
        await gaiman.echo_extra(await gaiman.get(\`https://jcubic.pl/file.txt\`), 100);
        gaiman.echo(\`<white>\` + await gaiman.ask(\`? \`) + \`</white>\`);
        const $_gaiman = gaiman;
        await gaiman.load(\`file.js\`)
        const $_name = name;
        let $_x = await gaiman.ask(\`? \`, async function lambda($_name) {
            return $_name !== \`\`;
        });
        let $_x = await gaiman.ask_extra(\`? \`, 0, async function lambda($_name) {
            return $_name !== \`\`;
        });
        await gaiman.echo_extra('this is <red>Text</red>', 50);
        gaiman.echo(await gaiman.get(await gaiman.ask(\`?\`)));
        gaiman.echo(await (await gaiman.get(await (await gaiman.ask(\`? \`)).toLowerCase())).replace(/engine/, \`Engine\`));
        gaiman.echo(await (await (await gaiman.get(await gaiman.ask(\`? \`))).toUpperCase()).replace(/engine/, \`Engine\`));
        await gaiman.echo_extra(...new GaimanArray(\`hello\`, 100));
        gaiman.clear();
        gaiman.echo(\`Hello\`);
        gaiman.clear();
        gaiman.clear();
        await gaiman.echo_extra(\`message.\`, 50);
        gaiman.echo(await gaiman.ask(\`?\`));
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`functions should compile function calls 1`] = `
"async function main() {
    try {
        async function $_global($_message) {
            gaiman.echo($_message);
            if ($$__m = String($_message).match(/hello/), !!$$__m) {
                await $_show_hello();
            }
        }
        async function $_show_hello() {
            gaiman.echo(\`hello\`);
        }
        await $_global(\`hello\`);
        await $_hello(1, ...new GaimanArray(1, 2, 3));
        await $_hello(...new GaimanArray(1, 2, 3));
        await (await $_list[$_cmd](10))();
        await (await $_list[$_cmd](10)).foo.bar();
        await $_list[$_cmd][$_cmd]();
        await $_list[$_cmd][$_cmd].foo.bar();
        await (await $_list[$_cmd][$_cmd]()).foo.bar();
        await (await (await $_list[$_cmd](10)).foo.bar())();
        await (await (await $_list[$_cmd].foo(10)).foo.bar())();
        await (await (await $_list.inner[$_cmd].foo.bar(10)).foo.bar())();
        gaiman.echo(await (await 'this\\\\nis\\\\ntext'.toUpperCase()).replace(/this\\\\n/i, \`\`));
        gaiman.echo(await (await 'this\\\\nis\\\\ntext'.toUpperCase()).replace(/this\\\\n/i, \`\`));
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`functions should compile function definitions 1`] = `
"async function main() {
    try {
        async function $_foo($_arg) {
        }
        async function $_foo($_arg) {
            if ($$__m = String($_arg).match(/foo/), !!$$__m) {
                return 10 + 10;
            }
        }
        async function $_login($_username) {
            gaiman.echo(\`what's up?\`);
            if ($$__m = String($_username).match(/root/), !!$$__m) {
                return await gaiman.ask($_username + \`# \`);
            } else {
                return await gaiman.ask($_username + \`$ \`);
            }
        }
        async function $_define() {
        }
        async function $_define(...$_args) {
        }
        async function $_define($_a, ...$_args) {
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`functions should create factorial function 1`] = `
"async function main() {
    try {
        async function $_factorial($_n) {
            if ($_n <= 0) {
                return 1;
            } else {
                return $_n * await $_factorial($_n - 1);
            }
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`global should ignore comments 1`] = `
"async function main() {
    try {
        let $_x = 10;
        let $_x = {
            [\`foo\`]: 10,
            [\`bar\`]: 20
        };
        let $_y = new GaimanArray(1, 2, 3, 4);
        async function $_foo() {
            return 10;
        }
        while (!true) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(1);
        for (let $_i of new GaimanArray(1, 2, 3)) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            $_x;
        }
        gaiman.exit_loop(2);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`global should parse constant values 1`] = `
"async function main() {
    try {
        let $_a = Infinity;
        let $_b = null;
        let $_c = true;
        let $_d = false;
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`global should parse do blocks 1`] = `
"async function main() {
    try {
        let $_x = 20;
        {
            let $_x = 10;
            $_x = $_x + 10;
        }
        gaiman.echo($_x);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`global should parse imports 1`] = `
"async function main() {
    try {
        const $_$ = $;
        const $_firebase = firebase;
        await gaiman.load(\`https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js\`)
        const $_firebase = firebase;
        await gaiman.load(\`https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js\`);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`global should parse other syntax 1`] = `
"async function main() {
    try {
        const $_Promise = Promise, $_setTimeout = setTimeout;
        gaiman['async'](async function () {
            await gaiman.animate(async function () {
                await gaiman.exec_extra(\`hello, world\`, 0);
            });
        });
        async function $_delay($_time) {
            return await new $_Promise(async function lambda($_resolve) {
                await $_setTimeout($_resolve, $_time);
            });
        }
        gaiman['async'](async function () {
            await gaiman.animate(async function () {
                let $_command = await $_commands.shift();
                await $_delay(1000);
                await gaiman.exec_extra($_command, 10);
            });
        });
        gaiman['async'](async function () {
            await gaiman.animate(async function () {
                let $_command = await $_commands.shift();
                await $_delay(1000);
                await gaiman.exec_extra($_command, 10);
            });
        });
        let $_stage = await new $_canvas.Canvas(await $_cols(), 10);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`if statements should compile base if 1`] = `
"async function main() {
    try {
        if ($$__m = String($$__m[1]).match(/foo/), !!$$__m) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/bar/), !!$$__m) {
                gaiman.echo($$__m[1]);
            }
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`if statements should compile if_else 1`] = `
"async function main() {
    try {
        if ($$__m = String($$__m[1]).match(/foo/), !!$$__m) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g), !!$$__m) {
                gaiman.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g), !!$$__m) {
                gaiman.echo($$__m[1]);
            } else {
                gaiman.echo(\`NOP\`);
            }
        } else {
            gaiman.echo(\`NOP\`);
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`if statements should compile multiple if_else  1`] = `
"async function main() {
    try {
        if ($$__m = String($$__m[1]).match(/foo/), !!$$__m) {
            let $_command = await gaiman.ask(\`? \`);
            if ($$__m = String($_commad).match(/(bar)/g), !!$$__m) {
                gaiman.echo($$__m[1]);
            } else if ($$__m = String($_command).match(/(baz)/g), !!$$__m) {
                gaiman.echo($$__m[1]);
            } else {
                gaiman.echo(\`NOP\`);
            }
        } else {
            gaiman.echo(\`NOP\`);
        }
        let $_command = await gaiman.ask(\`? \`);
        if ($$__m = String($_command).match(/foo/), !!$$__m) {
            gaiman.echo(\`1\`);
        } else if ($$__m = String($_command).match(/bar/), !!$$__m) {
            gaiman.echo(\`2\`);
        } else {
            gaiman.echo(\`3\`);
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`if statements should compile multiple if_else with expressions 1`] = `
"async function main() {
    try {
        gaiman.echo(\`hello\` + \` world\`);
        let $_command = await gaiman.ask(\`? \`);
        if ($$__m = String($_command).match(/<title>.*<\\\\/title>/), !!$$__m) {
            let $_command = await gaiman.ask(\`? \`);
            let $_foo = 30 * 30 / 2;
            let $_bar = +$_command;
            let $_baz = 10;
            let $_quux = -$_baz;
            10 * 10 + 3;
            if (-1 === -1) {
                let $_x = -1 === 10;
            }
            if (10 < 0) {
            }
            if (10 <= 20 && 10 > 20 || 10 === 20 && 10 !== 20) {
            }
            if (!($$__m = String($_commad).match(/(bar)/), !!$$__m) && ($$__m = String($_command).match(/(baz)/), !!$$__m)) {
                gaiman.echo($$__m[1] + \`foo\`);
                let $_bar = 10 + 10 * 20;
                let $_baz = 30 * 30 / 2;
                let $_x = 10 % 20;
            } else if ($_foo === 10 && $_bar === 0) {
                gaiman.echo(\`\${ $_foo } \${ $_bar }\`);
            } else if ($_foo === 10 || $_bar === 20) {
                gaiman.echo(\`\${ $_foo }\`);
            } else {
                let $_quux = 30 * 30 / 2 * 3;
                10 * 10 / 2;
            }
        }
        let $_fn = async function lambda($_string) {
            let $_cmd = gaiman.parse($_string);
            if ($_cmd.length === 1) {
                return new GaimanArray(\`dir\`, \`cd\`);
            } else {
                let $_last = await $_cmd.pop();
            }
        };
        let $_x = await async function lambda($_x) {
            return $_x;
        }(\`fun fun\`);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`loop should parse break 1`] = `
"async function main() {
    try {
        let $_x = 0;
        while (true) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            $_x = $_x + 1;
            if ($_x > 10) {
                break;
            }
            gaiman.echo($_x);
        }
        gaiman.exit_loop(1);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`loop should parse continue 1`] = `
"async function main() {
    try {
        for (let $_i of new GaimanArray(1, 2, 3, 4, 5, 6, 7)) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            if ($_i % 2 === 0) {
                continue;
            }
            gaiman.echo($_i);
        }
        gaiman.exit_loop(1);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`loop should parse for loops 1`] = `
"async function main() {
    try {
        for (let $_chr of \`hello\`) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo($_chr);
        }
        gaiman.exit_loop(1);
        for (let $_chr of location.href) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            gaiman.echo($_chr);
        }
        gaiman.exit_loop(2);
        for (let [$_key, $_value] of Object.entries($_collect)) {
            if (gaiman.should_break_loop(3)) {
                break;
            }
            gaiman.echo(\`\${ $_key } => \${ $_value }\`);
        }
        gaiman.exit_loop(3);
        for (let $_i of new GaimanArray(1, 2, 3, 4)) {
            if (gaiman.should_break_loop(4)) {
                break;
            }
        }
        gaiman.exit_loop(4);
        for (let $_i of new GaimanArray(1, 2, 3, 4)) {
            if (gaiman.should_break_loop(7)) {
                break;
            }
            for (let $_j of new GaimanArray(1, 2, 3, 4)) {
                if (gaiman.should_break_loop(6)) {
                    break;
                }
                for (let $_k of new GaimanArray(1, 2, 3, 4)) {
                    if (gaiman.should_break_loop(5)) {
                        break;
                    }
                    gaiman.echo($_i + $_j + $_k);
                }
                gaiman.exit_loop(5);
            }
            gaiman.exit_loop(6);
        }
        gaiman.exit_loop(7);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`loop should parse while loops 1`] = `
"async function main() {
    try {
        let $_x = 10;
        while ($_x > 0) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo(\`NUM: \${ $_x }\`);
            $_x = $_x - 1;
        }
        gaiman.exit_loop(1);
        while (!true) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
        }
        gaiman.exit_loop(2);
        while (!true) {
            if (gaiman.should_break_loop(4)) {
                break;
            }
            let $_i = 0;
            while ($_i < 10) {
                if (gaiman.should_break_loop(3)) {
                    break;
                }
                $_i += 1;
            }
            gaiman.exit_loop(3);
        }
        gaiman.exit_loop(4);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`try..catch should parse empty try..catch 1`] = `
"async function main() {
    try {
        try {
        } catch (e) {
            if (e instanceof Exit) {
                throw e;
            }
        }
        if (true) {
            try {
            } catch (e) {
                if (e instanceof Exit) {
                    throw e;
                }
            }
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`try..catch should parse try..catch with code 1`] = `
"async function main() {
    try {
        try {
            gaiman.echo(10);
        } catch ($_echo) {
            if ($_echo instanceof Exit) {
                throw $_echo;
            }
            \`err\`;
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`try..catch should parse try..catch with exception var 1`] = `
"async function main() {
    try {
        try {
            await $_x();
        } catch ($_e) {
            if ($_e instanceof Exit) {
                throw $_e;
            }
            gaiman.echo(\`Err: \` + $_e.message);
        }
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`values should parse arrays 1`] = `
"async function main() {
    try {
        let $_x = new GaimanArray(1, 2, 3, 4);
        $_x = new GaimanArray(1, 2, 3, 4);
        for (let $_word of new GaimanArray(\`lorem\`, \`ipsum\`, \`dolor\`)) {
            if (gaiman.should_break_loop(1)) {
                break;
            }
            gaiman.echo($_word);
        }
        gaiman.exit_loop(1);
        for (let $_i of new GaimanArray(1, 2, 3)) {
            if (gaiman.should_break_loop(2)) {
                break;
            }
            gaiman.echo($_i);
        }
        gaiman.exit_loop(2);
        let $_names = new GaimanArray(\`helo\`, \`world\`);
        gaiman.echo($_names[0] + \` \` + $_names[1]);
        gaiman.echo(await new GaimanArray(1, 2, 3, 4).map(async function lambda($_x) {
            return $_x * $_x;
        }));
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`values should parse dictionaries 1`] = `
"async function main() {
    try {
        let $_dict = {};
        let $_dict = {
            [\`foo\`]: 10,
            [\`bar\`]: \`hello\`,
            [\`baz\`]: new GaimanArray(1, 2, 3),
            [\`quux\`]: {
                [\`1\`]: 10,
                [\`2\`]: 20,
                [\`3\`]: 30
            }
        };
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`values should parse heredocs 1`] = `
"async function main() {
    try {
        gaiman.echo('HELLO WORLD');
        await gaiman.echo_extra('HELLO WORLD <#>', 50);
        await gaiman.echo_extra('HELLO WORLD', 256);
        async function $_eval($_str) {
            let $_fn = await location.constructor.constructor(\`return \${ $_str }\`);
            return await $_fn();
        }
        let $_factorial = await $_eval('(function(n) {\\\\n   return Array.from({length: n}, (_, i) => i + 1).reduce((a,b) => a * b, 1);\\\\n})');
        gaiman.echo(await $_factorial(10));
        gaiman.echo(await 'this\\\\nis\\\\ntext'.toUpperCase());
        gaiman.echo(await (await 'this\\\\nis\\\\ntext'.toUpperCase()).replace(/this\\\\n/i, \`\`));
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`values should parse numbers 1`] = `
"async function main() {
    try {
        100;
        100000;
        1000000000000;
        1e-11;
        256;
        4095;
        0;
        9999;
        255;
        255;
        1000000000;
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`values should parse strings 1`] = `
"async function main() {
    try {
        gaiman.echo(\`foo bar\`);
        gaiman.echo(\`helo \\"xxx\\"\`);
        gaiman.echo(\`hello \\\\\\\\\`);
        gaiman.echo(\`hello \\\\\\\\\\"hello\\\\\\\\\\" hello\`);
        gaiman.echo(\`hello \${ $_xxx } bar\`);
        gaiman.echo(\`hello \\\\\${x()} baz\`);
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;

exports[`values should setting values 1`] = `
"async function main() {
    try {
        let $_foo = 10;
        await JSON.stringify({ [\`foo\`]: 10 }, null, 2);
        document.cookie = 'foo=' + String(10);
        location.href = \`https://example.com\`;
    } catch (e) {
        if (!(e instanceof Exit)) {
            gaiman.error(e);
        }
    } finally {
        gaiman.exit();
    }
}"
`;
