/*    ______      _
 *   / ____/___ _(_)___ ___  ____ _____
 *  / / __/ __ `/ / __ `__ \/ __ `/ __ \
 * / /_/ / /_/ / / / / / / / /_/ / / / /
 * \____/\__,_/_/_/ /_/ /_/\__,_/_/ /_/
 *
 * Storytelling Text Based Game Engine
 * This file is PEG grammar for Gaiman programming language
 *
 * Copyrigth (C) 2021-2022 Jakub T. Jankiewicz <https://jcubic.pl/me>
 *
 * Released under GNU GPL v3 or later
 */
{{
    function make_if(test, body, alternative) {
        return {
            "type": "IfStatement",
            "test": test,
            "consequent": make_block(body),
            "alternate": alternative
        };
    }
    function main(body) {
        const result = {
            "type": "FunctionDeclaration",
            "id": make_identifier('main'),
            "params": [],
            "body": make_block(body),
            "generator": false,
            "expression": false,
            "async": true
        };
        return result;
    }
    function build_list(first, rest) {
        const list = rest.map(prop => prop[3]);
        list.unshift(first);
        return list;
    }
    function method(...props) {
        return property(...props.map(make_identifier));
    }
    function gaiman_prop(method) {
        return property2(make_identifier("gaiman"), make_identifier(method), false);
    }
    function gaiman_call(method, ...args) {
        return call(gaiman_prop(method), ...args);
    }
    function map_extra_method(method) {
        return method.replace(/\*$/, '_extra')
    }
    function make_block(body) {
        return {
            "type": "BlockStatement",
            "body": body
        }
    }
    function make_identifier(name) {
        return {
            type: 'Identifier',
            name: name
        };
    }
    function make_var_declaration(identifier, init) {
        return {
            type: "VariableDeclarator",
            id: make_identifier(identifier),
            init: init
        };
    }
    function make_vars(kind, ...declarations) {
        return {
            type: "VariableDeclaration",
            kind: kind,
            declarations: declarations
        };
    }
    function variable(name, expression) {
        return {
            "type": "VariableDeclaration",
            "declarations": [{
                "type": "VariableDeclarator",
                "id": name,
                "init": expression
            }],
            "kind": "let"
        };
    }
    function declare(names) {
        return {
            "type": "VariableDeclaration",
            "declarations": names.map(function(name) {
                return {
                    "type": "VariableDeclarator",
                    "id": make_identifier(variable_prefix + name),
                    "init": make_identifier(name)
                };
            }),
            "kind": "const"
        };
    }
    function literal(value) {
        return { type: 'Literal', value }
    }
    function expression_statement(expression) {
        return {
            "type": "ExpressionStatement",
            "expression": expression
        };
    }
    function expression_fold(type) {
        return function fold(head, tail, mapping) {
             return tail.reduce(function(result, element) {
                var opertator = mapping ? mapping[element[1]] : element[1];
                return {
                    "type": type,
                    "operator": opertator,
                    "left": result,
                    "right": element[3]
                };
            }, head);
        }
    }
    var binary_fold = expression_fold("BinaryExpression");
    var logical_fold = expression_fold("LogicalExpression");
    function property(...args) {
        return args.reduce(function(result, item) {
            return property2(result, item, false);
        });
    }
    function property2(object, property, computed) {
        return {
            type: "MemberExpression",
            computed,
            object,
            property
        };
    }
    function call(callee, ...args) {
        return {
            type: "CallExpression",
            callee: callee,
            arguments: args
        };
    }
    function parse_string(string) {
        var result = string.replace(/\\n/g, '\uFFFF\uFFFF');
        result = JSON.parse(result);
        result = result.replace(/\\/g, '\\\\').replace(/\uFFFF\uFFFF/g, '\\n');
        return result;
    }
    function create_template_literal(string) {
        var re = /(\$[A-Z_$a-z][A-Z_a-z0-9]*)/;
        var expressions = [];
        var constants = [];
        string.split(re).map(token => {
            if (token.match(re)) {
                expressions.push(make_identifier(token.replace(/^\$/, '$_')));
            } else {
                constants.push({
                    "type": "TemplateElement",
                    "value": {
                        "raw": escape_quote(token)
                    }
                });
            }
        });
        return {
            type: "TemplateLiteral",
            expressions,
            quasis: constants
        };
    }
    function bang_bang(argument) {
        return {
            "type": "UnaryExpression",
            "operator": "!",
            "argument": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": argument,
                "prefix": true
            },
            "prefix": true
        };
    }
    function escape_quote(str) {
       return str.replace(/\$\x7b/g, '\\$\x7b');
    }
    function main_try_catch(body) {
        return try_catch(body, 'e', [
            expression_statement(gaiman_call('error', make_identifier("e")))
        ]);
    }
    function try_catch(body, error_var, catch_clause) {
        return {
            "type": "TryStatement",
            "block": make_block(body),
            "handler": {
                "type": "CatchClause",
                "param": {
                    "type": "Identifier",
                    "name": error_var
                },
                "body": make_block(catch_clause)
            }
        };
    }
    function jump(name) {
        const mapping = {
            "break": "BreakStatement",
            "continue": "ContinueStatement"
        };
        return {
            "type": mapping[name],
            "label": null
        };
    }
    function lambda(params, body) {
        return {
            "type": "FunctionExpression",
            "id": make_identifier('lambda'),
            "async": true,
            "params": params,
            "body": make_block(body)
        };
    }
    // move error location without mutation
    function move_location(loc, start, end) {
        const { start: loc_start, end: loc_end } = loc;
        const new_loc = {
            ...loc,
            start: {
                ...loc_start,
                column: loc_start.column + start,
                offset: loc_start.offset + start
            },
            end: {
                ...loc_end,
                column: loc_end.column + end,
                offset: loc_end.offset + end
            }
        };
        return new_loc;
    }
    function is_number_literal(obj) {
        if (!obj || obj instanceof Array) {
            return false;
        }
        return typeof obj === 'object' &&
            obj.type === 'Literal' &&
            typeof obj.value === 'number';
    }
    var async_commands = ["ask", "get", "post", "sleep", "echo*", "prompt*", "input*", "ask*", "post*", "rpc", "exec", "exec*", "enter*"];
    var sync_commands = ["echo", "type", "prompt", "config", "input", "parse*", "parse", "store", "complete", "update", "clear", "mask", "enter"];
    var available_commands = async_commands.concat(sync_commands);
    var extra_single = ["sleep*", "get*"];
    var blacklist_properties = ["constructor", "__proto__", "prototype"];
    var variable_prefix = '$_';
}}

{
    var loop_count = 0;

    function with_loop_guard(fn) {
        var guard_var = make_identifier('loop_guard');
        var cond = {
            "type": "UnaryExpression",
            "operator": "!",
            "argument": {
                "type": "UpdateExpression",
                "operator": "--",
                "argument": guard_var,
                "prefix": true
            },
            "prefix": true
        };
        return function(...args) {
            const last = args.length - 1;
            const body = args[last];
            args[last] = [
                make_if(gaiman_call('should_break_loop', literal(++loop_count)), [
                     jump('break')
                ]),
                ...body
            ];
            return [
                fn(...args),
                expression_statement(gaiman_call('exit_loop', literal(loop_count)))
            ];
        };
    }
    var for_loop = with_loop_guard(function(variable, value, body) {
        if (variable instanceof Array) {
            return {
                "type": "ForOfStatement",
                "await": false,
                "left": {
                    "type": "VariableDeclaration",
                    "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "ArrayPattern",
                            "elements": variable
                        },
                        "init": null
                     }],
                     "kind": "let"
                },
                "right": call(method('Object', 'entries'), value),
                "body": make_block(body)
            };
        }
        return {
            "type": "ForOfStatement",
            "await": false,
            "left": {
                "type": "VariableDeclaration",
                "declarations": [{
                    "type": "VariableDeclarator",
                    "id": variable,
                    "init": null
                }],
                "kind": "let"
            },
            "right": value,
            "body": make_block(body)
        };
    });
    var while_loop = with_loop_guard(function(test, body) {
        return {
            "type": "WhileStatement",
            "test": test,
            "body": make_block(body)
        };
    });
    var heredoc_begin = null;
    var $$__m; // result of match
    var match_identifer = make_identifier('$$__m');
    var match_method = make_identifier('match');
}

Start = statements:statements {
    return {
        "type": "Program",
        "body": [
            main([
                main_try_catch(statements),
                expression_statement(gaiman_call('exit'))
            ])
        ]
    };
}

statement_list = !"end" _ statements:statement* _ {
    return statements.flat(2).filter(Boolean);
}

statements = statement_list / null_array

statement = !("end" / "catch") _ statement:(if / for_loop / named_do / while_loop / try_catch / jump / return / import / var / do_block / expression_statement / function_definition) _ {
   return statement;
}

expression_statement = !keyword expression:expression_like {
    return expression_statement(expression);
}

expression_like = set / command / expression


expression = constructor / math_expression / prop_access / heredoc / function_call / lambda / dict / match_var / array / any_name / string / literal / re

command = adapter_command

end = "end" { return null; }

if = _ "if" _ cond:expression_like _ "then" _ body:statements next:(end / if_next / last_else) _ {
  return make_if(cond, body, next);
}

if_next = _ "else" _ if_next:if {
    return if_next;
}

last_else = _ "else" _ body:statements "end" {
    return {
        "type": "BlockStatement",
        "body": body
    };
}

jump = _ keyword:$("break" / "continue") _ {
    return jump(keyword);
}

for_loop = "for" SP !keyword arg:((variable _ "," _ variable) / variable) SP "in" SP iterator:(expression_like / variable) _ "do" _ body:statements _ "end" _ {
    if (arg instanceof Array) {
        return for_loop([arg[0], arg[4]], iterator, body);
    } else {
        return for_loop(arg, iterator, body);
    }
}

while_loop = "while" SP test:expression _ "do" _ body:statements _ "end" _ {
    return while_loop(test, body);
}

try_catch_with_var = "try" _ try_block:statements _ "catch" SP varable:name _ catch_block:statements _ "end" _ {
    return try_catch(try_block, variable_prefix + varable, catch_block);
}


try_catch_simple = "try" _ try_block:statements _ "catch" _ catch_block:statements _ "end" _ {
    return try_catch(try_block, 'e', catch_block);
}

try_catch = try_catch_with_var / try_catch_simple

bracket_prop = prop:("[" _ property:(math_expression / dict / match_var / array / function_call / string / literal) _ "]")

dot_prop = prop:(_ "." _ name) {
    return make_identifier(prop[3]);
}

object_expression = "(" _ object:(function_call / prop_access / command / object) _ ")" { return object; }

object = object_expression / global / array / heredoc / string / any_name

prop_access = object:object props:(bracket_prop / dot_prop)+ _ {
    return props.reduce((object, property) => {
        const result = {
            type: 'MemberExpression',
            object,
            property
        };
        if (property[0] == "[") {
            result.computed = true;
            result.property = property[2];
        }
        return result;
    }, object);
}

dict_prop = _ name:string _ "=>" _ value:expression _ {
    return {
        type: "Property",
        key: name,
        computed: true,
        value,
        kind: "init",
        method: false,
        shorthand: false
    };
}

splat_param = "*" variable:variable {
    return {
        "type": "RestElement",
        "argument": variable
    };
}

param_list = first:(variable / splat_param) rest:(_ "," _ (variable / splat_param) _)* _ {
    return build_list(first, rest);
}

argument = expression_like / variable

splat_arg = "*" argument:argument {
    return {
        "type": "SpreadElement",
        "argument": argument
    };
}

argument_list = first:(splat_arg / argument) rest:(_ "," _ (splat_arg / argument) _)* _ {
    return build_list(first, rest);
}

array = "[" _ values:(argument_list / null_array) _ "]" {
    return {
        "type": "NewExpression",
        "callee": make_identifier("GaimanArray"),
        "arguments": values
    };
    return {
        "type": "ArrayExpression",
        "elements": values
    };
}

dict_list = _ first:dict_prop rest:(_ "," _ dict_prop _)* _ {
    return build_list(first, rest);
}

dict = _ "{" _ properties:(dict_list / null_array)  _ "}" _ {
    return {
        "type": "ObjectExpression",
        "properties": properties
    };
}

lambda_value = "(" _ lambda:lambda _ ")" { return lambda; }

call = "(" _ args:(argument_list / null_array) _ ")"

constructor = "new" SP expression:(prop_access / variable) _ "(" _ args:(argument_list / null_array) ")" _ {
    return {
        "type": "NewExpression",
        "callee": expression,
        "arguments": args
    };
}

function_call = _ !keyword expression:(prop_access / lambda_value / variable) _ "(" _ args:(argument_list / null_array) ")" _ rest:(call / bracket_prop / dot_prop)* {
    if (rest.length === 0) {
        return {
            "type": "AwaitExpression",
            "argument": call(expression, ...args)
        };
    }
    return rest.reduce(function(acc, item) {
        if (acc.type === 'CallExpression') {
            acc = {
                "type": "AwaitExpression",
                "argument": acc
            };
        }
        if (item[0] == "(") {
            return {
                "type": "AwaitExpression",
                "argument": call(acc, ...item[2])
            };
        } else {
            let result = {
                "type": "MemberExpression",
                "object": acc,
                property: item
            };
            if (item[0] == "[") {
                result.computed = true;
                result.property = item[2];
            }
            return result;
        }
    }, call(expression, ...args))
}

do_block = _ "do" _ body:statements _ "end" _ {
    return {
        "type": "BlockStatement",
        body: body
    };
}

function_definition = _ "def" _ name:variable _ "(" args:(param_list / null_array) ")" _  body:statements _ "end" _ {
    const fn_name = name.name.replace(/\$_/, '');
    if (available_commands.includes(fn_name)) {
        const error = new Error(`invalid function name, '${fn_name}' is a command`);
        error.location = move_location(location(), 4, fn_name.length + 4);
        throw error;
    }
    return {
        "type": "FunctionDeclaration",
        "id": name,
        "params": args,
        "async": true,
        "body": {
            "type": "BlockStatement",
            "body": body
        }
    };
}

null_array = '' { return []; }

lambda = "lambda" _ "(" params:(param_list / null_array) ")" _ body:statements _ "end" _ {
    return lambda(params, body);
}

return = _ "return" _ expression:expression_like _ {
    return {
        "type": "ReturnStatement",
        "argument": expression
    };
}

var = _ "let" _ name:(variable) _ rest:("=" _ expression_like)? _ {
    return {
        "type": "VariableDeclaration",
        "declarations": [{
            "type": "VariableDeclarator",
            "id": name,
            "init": rest && rest[2]
        }],
        "kind": "let"
    };
}

import_name = "import" [ ]+ name:name rest:("," _ name)*  !([ ]+ "from") {
    var names = rest.map(x => x[2]);
    names.unshift(name);
    return declare(names);
}

import_named_library = "import" [ ]+ name:name [ ]+ "from" [ ]+ string:string {
    return  [
        {
            "type": "AwaitExpression",
            "argument": gaiman_call('load', string)
        },
        declare([name])
    ];
}

import_library = "import" [ ]+ string:string _ {
    return expression_statement({
        "type": "AwaitExpression",
        "argument": gaiman_call('load', string)
    });
}


import = import_name / import_library / import_named_library

async_key = key:"async" {
    return property2(make_identifier("gaiman"), literal(key), true);
}

do_block_key = key:("animate") {
    return gaiman_prop(key, false);
}

async = target:async_key SP "do" _ body:statements _ "end" _ {
    return call(target, {
        "type": "FunctionExpression",
        "id": null,
        "async": true,
        "params": [],
        "body": make_block(body)
    });
}

named_do = keys:((async_key / do_block_key) SP)+ "do" _ body:statements _ "end" _ {
    return keys.reduceRight(function(body, key) {
        if (!(body instanceof Array)) {
            body = [body];
        }
        key = key[0];
        var expression = call(key, {
            "type": "FunctionExpression",
            "id": null,
            "async": true,
            "params": [],
            "body": make_block(body)
        });
        if (key.property.value !== 'async') {
            expression = {
                "type": "AwaitExpression",
                "argument": expression
            };
        }
        return {
            "type": "ExpressionStatement",
            "expression": expression
        };
    }, body);
}

DoubleStringCharacter = !('"' / "\\") . / "\\" . { return text(); } // "

string = '"' DoubleStringCharacter*  '"' { // '
    try {
        return create_template_literal(parse_string(text()));
    } catch(e) {
        const error = new Error(`invalid string literal`);
        error.location = location();
        throw error;
    }
}

literal = value:(number / boolean / null) {
   return {"type": "Literal", "value": value };
}

boolean = value:("true" / "false") {
    return value === "true";
}

null = "null" { return null; }

infinity = "infinity" {
    return make_identifier('Infinity');
}

value = string / literal / re / infinity / null

asterisk_name = word:$([a-z]+ "*")

command_name = word:$([a-z]+ "*"?)

async_command_name = word:$[a-z]+

adapter_async_strings = word:$async_command_name &{ return async_commands.includes(word) } { return word; }

adapter_asterisk_strings = word:$asterisk_name &{ return async_commands.includes(word) } { return word; }

adapter_static_strings = word:command_name &{ return sync_commands.includes(word); } { return word; }

adapter_command = extra_commands_single / extra_commands / async_command / static_command

extra_single = word:asterisk_name &{ return extra_single.includes(word); } { return word; }

command_argument = adapter_command / expression / splat_arg

extra_commands_single = SPACE method:extra_single SPACE expr:command_argument _ {
    return  {
        "type": "AwaitExpression",
        "argument": gaiman_call(map_extra_method(method), expr)
    };
}

extra_commands = SPACE method:adapter_asterisk_strings SPACE expr:command_argument SPACE args:(
    ("," _ expression)+ / '' {
        if (expr.type !== 'SpreadElement') {
            error(`Command ${method} require at least two arguments`);
        }
    }) _ {
    if (args) {
        args = args.map(x => x[2]);
    }
    return  {
        "type": "AwaitExpression",
        "argument": gaiman_call(map_extra_method(method), expr, ...(args || []))
    };
}


async_command = SPACE method:adapter_async_strings " " SPACE expr:command_argument SPACE args:("," _ expression _)* {
    return  {
        "type": "AwaitExpression",
        "argument": gaiman_call(method, expr, ...args.map(x => x[2]))
    };
}

static_command = SPACE method:adapter_static_strings ([ ]+ / &"(")? expr:command_argument? SPACE args:("," [ ]* expression)* {
    if (!expr) {
        return gaiman_call(map_extra_method(method), ...args.map(x => x[2]));
    }
    return gaiman_call(map_extra_method(method), expr, ...args.map(x => x[2]));
}

re = "/" re:("\\/" / [^/])* "/" flags:[igmsu]* {
    return {
        type: "Literal",
        value: {},
        regex: {
            pattern: re.join(''),
            flags: flags ? flags.join('') : ''
        }
    }
}

math_expression = unary / or

not_ = "not" " " { return "!"; }

unary = op:("-" / "+") _ expression:or {
    return {
        "type": "UnaryExpression",
        "operator": op,
        "argument": expression
    };
}

or
  = head:and tail:(SP "or" SP and)* {
      return logical_fold(head, tail, {"or": "||"});
  }

and
  = head:not tail:(SP "and" SP not)* {
      return logical_fold(head, tail, {"and": "&&"});
  }

not = "not " _ expression:equal {
    return {
        "type": "UnaryExpression",
        "operator": "!",
        "argument": expression
    };
} / equal

equal
  = head:binary tail:(_ ("==" / "!=") _ binary)* {
      return binary_fold(head, tail, {"==": "===", "!=": "!=="});
    }

binary
  = head:plus_minus tail:(_ ("<=" / ">=" / "<" / ">") _ plus_minus)* {
      return binary_fold(head, tail);
    }

plus_minus
  = head:mul_div tail:(_ ("+" / "-") _ mul_div)* {
      return binary_fold(head, tail);
    }

mul_div
  = head:match tail:(_ ("*" / "/" / "%") _ match)* {
      return binary_fold(head, tail);
    }

match = head:factor tail:(_ "=~" _ factor)* {
    return tail.reduce(function(result, element) {
        return {
            "type": "SequenceExpression",
            "expressions": [
                {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: match_identifer,
                    right: call(
                        property(
                            call(make_identifier('String'), result),
                            match_method
                        ),
                        element[3]
                    )
                 },
                 bang_bang(match_identifer)
             ]
        };
    }, head);
}

factor
  = function_call / prop_access / value / match_var / variable
  / "(" _ expr:(adapter_command / expression) _ ")" { return expr; }

any_name = variable:name {
  return make_identifier(variable_prefix + variable);
}

scoped = !keyword variable:name &{ return !available_commands.includes(variable) } {
  return make_identifier(variable_prefix + variable);
}

global = !keyword variable:("cookie" / "location" / "JSON" / "console" / "argv" / "node") {
    return make_identifier(variable);
}

variable = global / scoped

set = set_cookie / set_local

set_cookie = "cookie." name:name _ "=" _ expr:expression {
    return {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": property(
            make_identifier('document'),
            make_identifier('cookie')
        ),
        "right": {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
                "type": "Literal",
                "value": name + "="
            },
            "right": call(make_identifier('String'), expr)
        }
    };
}

assign_operator = $("=" !"=" / "*=" / "+=" / "-=" / "%=" / "/=")

set_local = left:(prop_access / scoped) _ operator:assign_operator _  right:(expression_like / variable) {
    return {
        "type": "AssignmentExpression",
        "operator": operator,
        "left": left,
        "right": right
    };
}

match_var = "$" num:integer {
    return {
        type: "MemberExpression",
        computed: true,
        object: match_identifer,
        property: {
            type: "Literal",
            value: num
        }
    };
}

heredoc = "<<<" beginMarker "\n" text:content endMarker {
    const loc = location();
    const min = loc.start.column - 1;
    const re = new RegExp(`^ {${min}}`, 'mg');
    return {
        type: 'Literal',
        value: text.replace(re, '')
    };
}

__ = (![ \n),.]  .)

marker 'Marker' = $__+

beginMarker = m:marker { heredoc_begin = m; }

endMarker = "\n" " "* end:marker &{ return heredoc_begin === end; }

content = $(!endMarker .)*

comment = "#" [^\n]* { return null; }

integer = [0-9]+ { return parseInt(text(), 10); }

number = hex_number / binary_number / octal_number / decimal_number

hex_number = "0x"i digits:$hex_digit+ {
      return parseInt(digits, 16);
}

octal_number = "0" digits:$octal_digit+ {
      return parseInt(digits, 8);
}

binary_number = "0b" digits:$binary_digit+ {
      return parseInt(digits, 2);
}

hex_digit
  = [0-9a-f]i

octal_digit
  = [0-7]

binary_digit
  = [01]

decimal_number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point
  = "."

digit1_9
  = [1-9]

e
  = [eE]

exp
  = e (minus / plus)? DIGIT+

frac
  = decimal_point DIGIT+

int
  = zero / (digit1_9 DIGIT*)

minus
  = "-"

plus
  = "+"

zero
  = "0"

DIGIT = [0-9]

keyword = ("if" / "then" / "end" / "else" / "return" / "def" / "do" / "in" / "for" / "while" / "break" / "continue" / "lambda" / "from" / "new" / "try" / "catch") !name

name = [A-Z_$a-z][A-Z_a-z0-9]* { return text(); }

WP = [ \t\n\r]

SPACE = [ ]*

_ "optional whitespace"
  = (WP* comment)+ / WP* { return []; }

SP "whitespace"
  = WP+
